/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'tmc' at '1/18/17 9:31 AM' with Gradle 3.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

import groovy.io.FileType
import org.apache.tools.ant.taskdefs.condition.Os

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'findbugs'


dependencies {
    findbugsPlugins group: 'com.mebigfatguy.fb-contrib', name: 'fb-contrib', version: '6.6.2'
}

sourceSets {
    main {
        resources {
            srcDirs "src/resources"
            include "*.properties", "*.txt"
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

def getToken()  {
    if(Os.isFamily (Os.FAMILY_WINDOWS)) return  "\\"
    return "/"
}

def getFullPkg (String _className){
    def dirPrefix = 'build/classes/main'
    def className = _className + ".class";
    def pathToMain = new File(dirPrefix)
    def retPath, i = 0, list = []
    pathToMain.eachFileRecurse (FileType.FILES) { file ->
        if(file.getName().indexOf(className) >= 0)  {
            retPath = file.getPath().substring(dirPrefix.length() + 1);            
            list.add(retPath)
            i++;
        }
    }
    if(i > 1) println "WARN: there is more than 1 match for $_className : $list"
    if(!retPath) {
        println "WARN: unable to find a match for ($_className). Using the original name"
        return _className
    }
    return retPath.replace(getToken(), ".").substring(0, retPath.length() - 6);
}

def myMainClass = System.getProperty('main')

if(myMainClass) {
    myMainClass = getFullPkg(myMainClass)
    println "myMainClass=" + myMainClass
}else{
    myMainClass = "Library"
}

mainClassName = myMainClass

tasks.withType (FindBugs){
    reports {
        xml.enabled = false
        html.enabled = true        
    }
}
findbugsMain.enabled = false

task wrapper(type: Wrapper){
    gradleVersion = "3.2.1"
}